# Ideally we would use GitHub Actions for this, but since we use self-hosted machines to run image builds
# we need the following features to use GitHub Actions for Images CI:
# - https://github.community/t5/GitHub-Actions/Make-secrets-available-to-builds-of-forks/m-p/30678#M508
# - https://github.community/t5/GitHub-Actions/GitHub-Actions-Manual-Trigger-Approvals/td-p/31504
# - https://github.community/t5/GitHub-Actions/Protecting-github-workflows/td-p/30290

parameters:
  - name: job_id
    type: string
    default: 'generate_image'

  - name: image_type #ubuntu2204-docker, windows2022-docker
    type: string

  - name: image_readme_name
    type: string

  - name: repository_ref
    type: string
    default: 'self'

jobs:
- job: ${{ parameters.job_id }}
  displayName: Image Generation (${{ parameters.image_type }})
  timeoutInMinutes: 600
  cancelTimeoutInMinutes: 30
  pool:
    ${{ if contains(parameters.image_type, 'ubuntu') }}:
      vmImage: ubuntu-latest
    ${{ else }}:
      vmImage: windows-latest

  steps:
  - checkout: ${{ parameters.repository_ref }}
    clean: true
    fetchDepth: 0
    fetchTags: false

  - task: PowerShell@2
    displayName: 'Set variables'
    inputs:
      targetType: 'inline'
      script: |
        $ImageType = "${{ parameters.image_type }}"
        $TemplateDirectoryName = if ($ImageType.StartsWith("ubuntu")) { "linux" } else { "win" }
        $TemplateDirectoryPath = Join-Path "images" $TemplateDirectoryName | Resolve-Path
        $TemplatePath = Join-Path $TemplateDirectoryPath "$ImageType.pkr.hcl"
        if ( -not (Test-Path $TemplatePath) ) {
            $TemplatePath = Join-Path $TemplateDirectoryPath "$ImageType.json"
        }
        Write-Host "##vso[task.setvariable variable=TemplateDirectoryPath;]$TemplateDirectoryPath"
        Write-Host "##vso[task.setvariable variable=TemplatePath;]$TemplatePath"

        $TempResourceGroupName = "packer-temp-$ManagedImageName"
        Write-Host "##vso[task.setvariable variable=TempResourceGroupName;]$TempResourceGroupName"

  - task: PowerShell@2
    displayName: 'Build VM'
    inputs:
      targetType: filePath
      filePath: ./images.CI/linux-and-win/build-image-docker.ps1
      arguments: -TemplatePath $(TemplatePath) `
    env:
      PACKER_LOG: 1
      PACKER_LOG_PATH: "$(Agent.TempDirectory)/packer-log.txt"

  - task: PowerShell@2
    displayName: 'Copy image artifacts to the separate directory'
    inputs:
      targetType: 'inline'
      script: |
        $readmePath = Join-Path "$(TemplateDirectoryPath)" "${{ parameters.image_readme_name }}"
        $softwareReportPath = Join-Path "$(TemplateDirectoryPath)" "software-report.json"

        Copy-Item -Path $readmePath -Destination "$(Build.ArtifactStagingDirectory)/"
        if (Test-Path $softwareReportPath) {
            Copy-Item -Path $softwareReportPath -Destination "$(Build.ArtifactStagingDirectory)/"
        }

  - task: PowerShell@2
    displayName: 'Print markdown software report'
    inputs:
      targetType: 'inline'
      script: |
        Get-Content -Path "$(Build.ArtifactStagingDirectory)/${{ parameters.image_readme_name }}"

  - task: PowerShell@2
    displayName: 'Print json software report'
    inputs:
      targetType: 'inline'
      script: |
        $softwareReportPath = "$(Build.ArtifactStagingDirectory)/software-report.json"
        if (Test-Path $softwareReportPath) {
            Get-Content -Path $softwareReportPath
        }

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'Built_Docker_Artifacts'
    displayName: Publish Artifacts

  - task: PowerShell@2
    displayName: 'Print provisioners duration'
    inputs:
      targetType: 'filePath'
      filePath: ./images.CI/measure-provisioners-duration.ps1
      arguments: -PackerLogPath "$(Agent.TempDirectory)/packer-log.txt" `
                        -PrefixToPathTrim "$(TemplateDirectoryPath)" `
                        -PrintTopNLongest 25
